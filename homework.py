# №1
# Есть программа, которая запрашивает ваши любимые песни(бесконечно)
# И выводит список любимых песен
	
# Вам необходимо вывести только уникальные значения из списка(список прошлого задания) в независимости от их регистра(Большие или маленькие буквы)
# Сохранять все песни в словарь(первое задание). Ключом будут числа от 1 и по возрастанию. {1: “Название песни”, 2: “Название песни”} и тд.
# Добавить CRUD систему к нашей программе. create, read, update, delete.
'''
liss = []
while True:
    music = int(input('\nВыберите действие:\n\n1 - Добавить песню\n2 - Изменить список песен\n3 - Посмотреть список песен\n4 - Удалить песню из списка\n\n0 - Выход\n\nВвод: '))
    if music == 1:
        print("\n\nВведите название песни")
        appmusic = input("\nНазвание песни: ")
        liss.append(appmusic)
        print('Песня добавлена!')
    elif music == 3:
        print(liss)
    elif music == 2:
        print(liss)
        print("\nВведите название песни которую хотите переименовать!")
        creamusic = input("\nНазвание песни: ")
        if creamusic in liss:
            liss.remove(creamusic)
            creamusic_1 = input('Переименование: ')
            liss.append(creamusic_1)
            print('Успешно изменено!')
    elif music == 4:
        print("Удаление песни")
        print(liss)
        musicdel = input("\nВведите музыку которую нужно удалить: ")
        if musicdel in liss:
            liss.remove(musicdel)
            print('Песня успешно удалена!')
        else:
            print("Не правильно")
    elif music == 0:
        exit()
    else:
        print('Введи правильное число!')
'''
#№2
# Мне нужна функция, которая принимает числа и возвращает строку из этого числа. Если же пользователь отправил аргумент не интежер вернуть строку “Принимаю только числа”
'''
while True:
    stri = ''
    try:
        number = int(input('Введите число: '))
        stri += str(number)
        print(type(stri), stri)
    except ValueError:
        print("Введите только числа!")
        continue
'''
# Разве не было бы здорово иметь возможность произносить свои числа по буквам, по буквам? Вместо скучного 731 вы могли бы написать модно Num: seven.three.one!Реализуйте функцию. Ваша функция также должна преобразовывать аргумент в целые числа.
# def func(number: int) -> str:
# print(func(731))  # “Num:seven.three.one”
''' 
number = {
    1: 'one.', 2: 'two.', 3: "three.", 4: 'four.', 5: 'five.', 6: 'six.', 7: 'seven.', 8: 'eich.', 9: 'nine.', 0: 'zero.'
}
num = int(input('Введите число: '))
if num in number:
    print(number[num])
'''
# Отсортируйте список из чисел от большего к меньшему. Создать список с помощью list comprehensions
'''
list = [5, 6, 2, 9, 10, 5, 7, 3, 1]
list = sorted(list)
list.reverse()
print(list)
'''
# вывести только уникальные значения из списка 
'''
lll = ["a", "b", "a", "c", "c"]
print(set(lll))
'''
# Создать lambda функцию, которая возвращает квадрат числа
'''print((lambda a: a * 4)(((float(input('Число: '))))))
'''
# Создать  lambda функцию, которая принимает два аргумента и возвращает произведение этих чисел.
'''
def numberr(a, b):
    print(a + b)

numberr((float(input('Число: '))),(float(input('Число: '))))

print((lambda a, b: a + b)(((float(input('Число: ')))), ((float(input('Число: '))))))
'''

# Создать Функцию которая возвращает “Hello world” и вызвать эту же функцию в другом файл. Предварительно импортировать эту функцию.
# написать функцию, которая находит факториал числа
# Стандартный год состоит из 365 дней, а високосный из 366 дней. Високосный год кратен 4, но при этом не кратен 100, либо кратен 400. Иными словами, если год делится на 4 без остатка, но делится на 100 только с остатком, то он високосный, иначе — невисокосный, кроме случая, если он делится без остатка на 400 — тогда он всё равно високосный. 
#  Напишите функцию с именем show_stars (rows). Если аргумет rows
# равен 5 то выдов должен быть таким :
# Пример:
# *
# **
# ***
# ****
# *****
# Напишите функцию с именем fizz_buzz, которая принимает число.
# ● Если число делится на 3, оно должно вернуть «Fizz».
# ● Если он делится на 5, он должен вернуть «Buzz».
# ● Если он делится как на 3, так и на 5, он должен вернуть «FizzBuzz»
# ● В противном случае он должен вернуть то же число.


# Написать функцию square, принимающую 1 аргумент — сторону
# квадрата, и возвращающую значения (с помощью кортежа):
# периметр квадрата, площадь квадрата

# Hаписать функцию is_prime, принимающую 1 аргумент — число от 0 до
# 1000, и возвращающую True, если оно простое, и False - иначе.

# Пользователь вводит числа в строку через пробел. Когда он нажимает
# Enter, на экран выводится сумма. Пользователь может снова вводить
# числа. Их сумма будет добавляться к уже посчитанной, и итог выводиться
# на экран. Когда вместо чисел вводится специальный символ, программа
# завершается.

#  Является ли число палиндромом. Если да, то должен напечатать True иначе false
#  4! -> 24. | 4 * 3 * 2 * 1 == 24
